pipeline {
    agent {
        label 'azure'  // Usar el slave de Azure
    }

    parameters {
        choice(
            name: 'BRANCH_TO_ANALYZE', 
            choices: ['main', 'develop', 'feature/sonarcloud'], 
            description: 'Branch a analizar'
        )
        booleanParam(
            name: 'SKIP_TESTS', 
            defaultValue: false, 
            description: 'Saltar ejecuci√≥n de tests'
        )
    }

    environment {
        // Credenciales de SonarCloud (configurar en Jenkins)
        SONAR_TOKEN = credentials('SONAR_TOKEN')
        SONAR_ORGANIZATION = credentials('SONAR_ORGANIZATION')
        SONAR_PROJECT_KEY = credentials('SONAR_PROJECT_KEY')
        
        // Variables del proyecto
        PROJECT_NAME = 'devopsPlab'
        PYTHON_VERSION = '3.10'
        
        // Directorios
        SONAR_SCANNER_HOME = '/tmp/sonar-scanner'
        COVERAGE_REPORTS = 'coverage.xml'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    try {
                        echo "üîÑ Descargando c√≥digo fuente..."
                        
                        // Limpiar workspace anterior
                        deleteDir()
                        
                        // Checkout del c√≥digo
                        checkout scm
                        
                        // Mostrar informaci√≥n del commit
                        sh '''
                            echo "=== INFORMACI√ìN DEL COMMIT ==="
                            git log -1 --oneline
                            echo "Branch actual: $(git branch --show-current || echo 'detached HEAD')"
                            echo "Commit hash: $(git rev-parse HEAD)"
                            echo "Autor: $(git log -1 --pretty=format:'%an <%ae>')"
                            echo "Fecha: $(git log -1 --pretty=format:'%ad')"
                        '''
                        
                        echo "‚úÖ C√≥digo descargado exitosamente"
                    } catch (Exception e) {
                        error("‚ùå Error durante checkout: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Setup Environment') {
            steps {
                script {
                    try {
                        sh '''
                            echo "üîß Configurando entorno de desarrollo..."
                            
                            # Verificar herramientas disponibles
                            python3 --version
                            pip3 --version || echo "pip3 no encontrado"
                            
                            # Crear entorno virtual para el proyecto
                            echo "Creando entorno virtual..."
                            python3 -m venv /tmp/venv-${BUILD_NUMBER}
                            . /tmp/venv-${BUILD_NUMBER}/bin/activate
                            
                            # Actualizar pip
                            pip install --upgrade pip
                            
                            # Instalar dependencias del proyecto
                            if [ -f requirements.txt ]; then
                                echo "Instalando dependencias del proyecto..."
                                pip install -r requirements.txt
                            else
                                echo "‚ö†Ô∏è No se encontr√≥ requirements.txt"
                            fi
                            
                            # Instalar herramientas de testing y calidad
                            echo "Instalando herramientas de testing..."
                            pip install pytest pytest-cov coverage flake8 pylint black
                            
                            # Verificar instalaciones
                            echo "‚úÖ Herramientas instaladas:"
                            pip list | grep -E "(pytest|coverage|flake8|pylint|black)"
                        '''
                        
                        echo "‚úÖ Entorno configurado exitosamente"
                    } catch (Exception e) {
                        error("‚ùå Error configurando entorno: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Install SonarScanner') {
            steps {
                script {
                    try {
                        sh '''
                            echo "üì• Instalando SonarScanner..."
                            
                            # Crear directorio para SonarScanner
                            mkdir -p ${SONAR_SCANNER_HOME}
                            cd ${SONAR_SCANNER_HOME}
                            
                            # Descargar SonarScanner
                            SONAR_SCANNER_VERSION="5.0.1.3006"
                            echo "Descargando SonarScanner ${SONAR_SCANNER_VERSION}..."
                            curl -fsSL -o sonar-scanner-cli.zip \
                                "https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip"
                            
                            # Extraer
                            unzip -q sonar-scanner-cli.zip
                            mv sonar-scanner-${SONAR_SCANNER_VERSION}-linux sonar-scanner
                            
                            # Hacer ejecutable
                            chmod +x sonar-scanner/bin/sonar-scanner
                            
                            # Verificar instalaci√≥n
                            echo "‚úÖ SonarScanner instalado:"
                            ./sonar-scanner/bin/sonar-scanner --version
                        '''
                        
                        echo "‚úÖ SonarScanner instalado exitosamente"
                    } catch (Exception e) {
                        error("‚ùå Error instalando SonarScanner: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Run Tests') {
            when {
                expression { params.SKIP_TESTS == false }
            }
            steps {
                script {
                    try {
                        sh '''
                            echo "üß™ Ejecutando tests con cobertura..."
                            
                            # Activar entorno virtual
                            . /tmp/venv-${BUILD_NUMBER}/bin/activate
                            
                            # Ejecutar tests con pytest y cobertura
                            if [ -d "tests" ]; then
                                echo "Ejecutando tests con pytest..."
                                pytest tests/ \
                                    --cov=todor \
                                    --cov-report=xml:coverage.xml \
                                    --cov-report=html:htmlcov \
                                    --cov-report=term \
                                    --junitxml=test-results.xml \
                                    -v
                                
                                echo "‚úÖ Tests ejecutados exitosamente"
                                
                                # Mostrar resumen de cobertura
                                echo "=== RESUMEN DE COBERTURA ==="
                                coverage report
                                
                            else
                                echo "‚ö†Ô∏è No se encontr√≥ directorio de tests, creando reporte de cobertura b√°sico..."
                                # Crear un reporte b√°sico para SonarCloud
                                coverage run --source=todor -m pytest --collect-only || true
                                coverage xml -o coverage.xml || true
                            fi
                        '''
                        
                        // Publicar resultados de tests
                        publishTestResults(
                            testResultsPattern: 'test-results.xml',
                            allowEmptyResults: true
                        )
                        
                        // Publicar cobertura HTML
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'htmlcov',
                            reportFiles: 'index.html',
                            reportName: 'Coverage Report'
                        ])
                        
                        echo "‚úÖ Tests completados exitosamente"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Tests fallaron, pero continuando con an√°lisis: ${e.getMessage()}"
                        // No fallar el pipeline si los tests fallan
                    }
                }
            }
        }

        stage('Code Quality Analysis') {
            parallel {
                stage('Flake8 - Style Check') {
                    steps {
                        script {
                            try {
                                sh '''
                                    echo "üîç Ejecutando an√°lisis de estilo con Flake8..."
                                    
                                    # Activar entorno virtual
                                    . /tmp/venv-${BUILD_NUMBER}/bin/activate
                                    
                                    # Ejecutar flake8
                                    flake8 todor/ --format=json --output-file=flake8-report.json || true
                                    flake8 todor/ --tee --output-file=flake8-report.txt || true
                                    
                                    echo "‚úÖ An√°lisis de estilo completado"
                                '''
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è Warning en an√°lisis de estilo: ${e.getMessage()}"
                            }
                        }
                    }
                }
                
                stage('Pylint - Code Analysis') {
                    steps {
                        script {
                            try {
                                sh '''
                                    echo "üîç Ejecutando an√°lisis de c√≥digo con Pylint..."
                                    
                                    # Activar entorno virtual
                                    . /tmp/venv-${BUILD_NUMBER}/bin/activate
                                    
                                    # Ejecutar pylint
                                    pylint todor/ --output-format=json > pylint-report.json || true
                                    pylint todor/ > pylint-report.txt || true
                                    
                                    echo "‚úÖ An√°lisis de c√≥digo completado"
                                '''
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è Warning en an√°lisis de c√≥digo: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }

        stage('SonarCloud Analysis') {
            steps {
                script {
                    try {
                        sh '''
                            echo "‚òÅÔ∏è Ejecutando an√°lisis de SonarCloud..."
                            
                            # Configurar variables para SonarScanner
                            export PATH="${SONAR_SCANNER_HOME}/sonar-scanner/bin:$PATH"
                            
                            # Crear archivo de propiedades de SonarCloud
                            cat > sonar-project.properties << EOF
# Informaci√≥n del proyecto
sonar.projectKey=${SONAR_PROJECT_KEY}
sonar.organization=${SONAR_ORGANIZATION}
sonar.projectName=${PROJECT_NAME}
sonar.projectVersion=1.0

# C√≥digo fuente
sonar.sources=todor/
sonar.tests=tests/
sonar.python.coverage.reportPaths=coverage.xml

# Exclusiones
sonar.exclusions=**/__pycache__/**,**/*.pyc,**/migrations/**,**/venv/**,**/htmlcov/**

# Configuraci√≥n de Python
sonar.python.version=${PYTHON_VERSION}

# Reportes de calidad
sonar.python.flake8.reportPaths=flake8-report.txt
sonar.python.pylint.reportPaths=pylint-report.json

# Configuraci√≥n del servidor
sonar.host.url=https://sonarcloud.io
sonar.login=${SONAR_TOKEN}

# Branch information
sonar.branch.name=${BRANCH_NAME}
EOF

                            echo "=== CONFIGURACI√ìN DE SONARCLOUD ==="
                            cat sonar-project.properties
                            echo "=================================="
                            
                            # Ejecutar SonarScanner
                            echo "Ejecutando SonarScanner..."
                            sonar-scanner \
                                -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                                -Dsonar.organization=${SONAR_ORGANIZATION} \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.login=${SONAR_TOKEN} \
                                -Dsonar.sources=todor/ \
                                -Dsonar.tests=tests/ \
                                -Dsonar.python.coverage.reportPaths=coverage.xml \
                                -Dsonar.exclusions="**/__pycache__/**,**/*.pyc" \
                                -Dsonar.branch.name=${BRANCH_NAME}
                            
                            echo "‚úÖ An√°lisis de SonarCloud completado exitosamente"
                        '''
                        
                        echo "‚úÖ SonarCloud analysis completed"
                    } catch (Exception e) {
                        error("‚ùå Error en an√°lisis de SonarCloud: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    try {
                        timeout(time: 5, unit: 'MINUTES') {
                            echo "‚è≥ Esperando resultado del Quality Gate..."
                            
                            def qg = waitForQualityGate()
                            
                            if (qg.status != 'OK') {
                                echo "‚ùå Quality Gate fall√≥: ${qg.status}"
                                echo "Detalles: ${qg}"
                                
                                // Decidir si fallar el pipeline o solo advertir
                                if (params.BRANCH_TO_ANALYZE == 'main') {
                                    error("Quality Gate fall√≥ en branch principal")
                                } else {
                                    echo "‚ö†Ô∏è Quality Gate fall√≥ en feature branch - continuando"
                                }
                            } else {
                                echo "‚úÖ Quality Gate passed!"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Error verificando Quality Gate: ${e.getMessage()}"
                        echo "Continuando sin bloquear el pipeline..."
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ Limpiando archivos temporales..."
                
                // Archivar reportes
                archiveArtifacts(
                    artifacts: 'coverage.xml,flake8-report.*,pylint-report.*,sonar-project.properties',
                    allowEmptyArchive: true
                )
                
                // Limpiar entornos virtuales
                sh '''
                    echo "Limpiando entornos virtuales..."
                    rm -rf /tmp/venv-${BUILD_NUMBER} || true
                    rm -rf ${SONAR_SCANNER_HOME} || true
                '''
            }
            echo "‚úÖ Pipeline de SonarCloud completado"
        }
        
        success {
            echo """
            ‚úÖ AN√ÅLISIS DE SONARCLOUD EXITOSO
            
            üìä Reportes generados:
            - Coverage Report: Disponible en Jenkins
            - SonarCloud Dashboard: https://sonarcloud.io/project/overview?id=${env.SONAR_PROJECT_KEY}
            
            üéØ Pr√≥ximos pasos:
            1. Revisar m√©tricas en SonarCloud
            2. Corregir issues cr√≠ticos si los hay
            3. Integrar con pipeline principal si es necesario
            """
        }
        
        failure {
            echo """
            ‚ùå AN√ÅLISIS DE SONARCLOUD FALL√ì
            
            üîç Pasos para debug:
            1. Revisar logs del stage que fall√≥
            2. Verificar credenciales de SonarCloud
            3. Verificar configuraci√≥n del proyecto
            4. Verificar conectividad a SonarCloud
            
            üìû Soporte: Crear issue en GitHub con logs completos
            """
        }
    }
} 
