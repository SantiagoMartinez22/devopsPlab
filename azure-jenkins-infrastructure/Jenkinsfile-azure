pipeline {
    agent any

    parameters {
        booleanParam(name: 'DESTROY_INFRASTRUCTURE', defaultValue: false, description: 'Destruir infraestructura existente')
        booleanParam(name: 'SKIP_ANSIBLE', defaultValue: false, description: 'Saltar configuración de Ansible')
        booleanParam(name: 'AUTO_CLEANUP_ON_FAILURE', defaultValue: true, description: 'Destruir infraestructura automáticamente si falla')
    }

    environment {
        // Credenciales de Azure (configurar en Jenkins)
        ARM_CLIENT_ID       = credentials('AZURE_CLIENT_ID')
        ARM_CLIENT_SECRET   = credentials('AZURE_CLIENT_SECRET')
        ARM_SUBSCRIPTION_ID = credentials('AZURE_SUBSCRIPTION_ID')
        ARM_TENANT_ID       = credentials('AZURE_TENANT_ID')
        
        // Directorios
        TF_DIR              = 'azure-jenkins-infrastructure/terraform'
        ANSIBLE_DIR         = 'azure-jenkins-infrastructure/ansible'
        SSH_KEY_FILE        = 'azure_jenkins_key'
        
        // Control de estado
        INFRASTRUCTURE_DEPLOYED = 'false'
    }

    stages {
        stage('Setup Terraform') {
            steps {
                script {
                    try {
                        // Siempre instalar Terraform (patrón del Jenkinsfile principal)
                        sh '''
                            echo "Instalando Terraform en directorio temporal..."
                            
                            # Crear directorio temporal para Terraform
                            mkdir -p /tmp/terraform-${BUILD_NUMBER}
                            cd /tmp/terraform-${BUILD_NUMBER}
                            
                            # Descargar e instalar Terraform usando curl
                            echo "Descargando Terraform 1.6.0..."
                            curl -fsSL -o terraform.zip https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip
                            
                            echo "Extrayendo Terraform..."
                            if command -v unzip &> /dev/null; then
                                unzip -o -q terraform.zip
                            else
                                # Alternativa si unzip no está disponible
                                python3 -c "
import zipfile
with zipfile.ZipFile('terraform.zip', 'r') as zip_ref:
    zip_ref.extractall('.')
"
                            fi
                            chmod +x terraform
                            
                            # Verificar instalación
                            echo "✅ Terraform instalado correctamente:"
                            ./terraform version
                        '''
                    } catch (Exception e) {
                        error("❌ Error instalando Terraform: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Destroy Infrastructure') {
            when {
                expression { params.DESTROY_INFRASTRUCTURE == true }
            }
            steps {
                script {
                    try {
                        dir("${TF_DIR}") {
                            sh '''
                                # Usar Terraform desde la ubicación temporal o sistema
                                if [ -f "/tmp/terraform-${BUILD_NUMBER}/terraform" ]; then
                                    TERRAFORM_BIN="/tmp/terraform-${BUILD_NUMBER}/terraform"
                                else
                                    TERRAFORM_BIN="terraform"
                                fi
                                
                                echo "🔥 Destruyendo infraestructura..."
                                $TERRAFORM_BIN init
                                $TERRAFORM_BIN destroy -auto-approve
                                echo "✅ Infraestructura destruida exitosamente"
                            '''
                        }
                    } catch (Exception e) {
                        echo "⚠️ Error destruyendo infraestructura: ${e.getMessage()}"
                        // No fallar aquí, continuar
                    }
                }
            }
        }

        stage('Deploy Infrastructure') {
            steps {
                script {
                    try {
                        dir("${TF_DIR}") {
                            sh '''
                                # Usar Terraform desde la ubicación temporal o sistema
                                if [ -f "/tmp/terraform-${BUILD_NUMBER}/terraform" ]; then
                                    TERRAFORM_BIN="/tmp/terraform-${BUILD_NUMBER}/terraform"
                                else
                                    TERRAFORM_BIN="terraform"
                                fi
                                
                                echo "🚀 Desplegando infraestructura en Azure..."
                                echo "🔑 Terraform generará claves SSH automáticamente"
                                
                                # Inicializar Terraform
                                $TERRAFORM_BIN init
                                
                                # Planificar
                                $TERRAFORM_BIN plan -out=tfplan
                                
                                # Aplicar
                                $TERRAFORM_BIN apply -auto-approve tfplan
                                
                                # Mostrar outputs (sin secretos)
                                echo "📊 Información de la infraestructura:"
                                $TERRAFORM_BIN output master_public_ip
                                $TERRAFORM_BIN output jenkins_url
                                
                                # Guardar clave SSH privada para uso posterior
                                echo "🔐 Guardando clave SSH generada automáticamente..."
                                $TERRAFORM_BIN output -raw ssh_private_key > ../${SSH_KEY_FILE}
                                chmod 600 ../${SSH_KEY_FILE}
                                # Copiarla dentro del directorio ansible para que ansible.cfg la detecte
                                cp ../${SSH_KEY_FILE} ../ansible/${SSH_KEY_FILE}
                            '''
                            
                            // Marcar que la infraestructura fue desplegada
                            env.INFRASTRUCTURE_DEPLOYED = 'true'
                            echo "✅ Infraestructura desplegada exitosamente"
                        }
                    } catch (Exception e) {
                        env.INFRASTRUCTURE_DEPLOYED = 'true' // Marcar para limpieza
                        error("❌ Error desplegando infraestructura: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Wait for VMs') {
            steps {
                script {
                    try {
                        // Obtener IPs de Terraform
                        dir("${TF_DIR}") {
                            env.MASTER_IP = sh(
                                script: '''
                                    if [ -f "/tmp/terraform-${BUILD_NUMBER}/terraform" ]; then
                                        TERRAFORM_BIN="/tmp/terraform-${BUILD_NUMBER}/terraform"
                                    else
                                        TERRAFORM_BIN="terraform"
                                    fi
                                    $TERRAFORM_BIN output -raw master_public_ip
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            env.SLAVE_IP = sh(
                                script: '''
                                    if [ -f "/tmp/terraform-${BUILD_NUMBER}/terraform" ]; then
                                        TERRAFORM_BIN="/tmp/terraform-${BUILD_NUMBER}/terraform"
                                    else
                                        TERRAFORM_BIN="terraform"
                                    fi
                                    $TERRAFORM_BIN output -raw slave_private_ip
                                ''',
                                returnStdout: true
                            ).trim()
                        }
                        
                        echo "Master IP: ${env.MASTER_IP}"
                        echo "Slave IP: ${env.SLAVE_IP}"
                        
                        // Esperar a que las VMs estén listas
                        sh '''
                            echo "⏳ Esperando a que las VMs estén listas..."
                            for i in {1..10}; do
                                if ssh -i ${SSH_KEY_FILE} -o ConnectTimeout=5 -o StrictHostKeyChecking=no azureuser@$MASTER_IP "echo 'VM Ready'" 2>/dev/null; then
                                    echo "✅ Master VM está lista"
                                    break
                                fi
                                echo "Intento $i/10 - Esperando 30 segundos..."
                                sleep 30
                            done
                        '''

                        // Esperar a que el Slave esté listo
                        sh '''
                            echo "⏳ Esperando a que la VM Slave esté lista..."
                            for i in {1..20}; do
                                if ssh -i ${SSH_KEY_FILE} -o ProxyJump=azureuser@$MASTER_IP -o ConnectTimeout=10 -o StrictHostKeyChecking=no azureuser@$SLAVE_IP "echo 'VM Ready'" 2>/dev/null; then
                                    echo "✅ Slave VM está lista"
                                    break
                                fi
                                echo "Intento $i/20 - Esperando 30 segundos..."
                                sleep 30
                            done
                        '''
                    } catch (Exception e) {
                        error("❌ Error esperando VMs: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Configure Ansible Inventory') {
            when {
                expression { params.SKIP_ANSIBLE == false }
            }
            steps {
                script {
                    try {
                        dir("${ANSIBLE_DIR}") {
                            sh '''
                                echo "📝 Configurando inventario de Ansible..."
                                
                                # Crear copia del inventario para no modificar el original
                                cp inventory/hosts inventory/hosts.tmp
                                
                                # Actualizar inventario con IPs reales
                                sed -i "s/MASTER_IP/$MASTER_IP/g" inventory/hosts.tmp
                                sed -i "s/SLAVE_IP/$SLAVE_IP/g" inventory/hosts.tmp
                                
                                # Usar el inventario temporal
                                mv inventory/hosts.tmp inventory/hosts
                                
                                echo "Inventario configurado:"
                                cat inventory/hosts
                            '''
                        }
                    } catch (Exception e) {
                        error("❌ Error configurando Ansible: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Install Jenkins') {
            when {
                expression { params.SKIP_ANSIBLE == false }
            }
            steps {
                script {
                    try {
                        dir("${ANSIBLE_DIR}") {
                            sh '''
                                echo "🔧 Instalando Jenkins con Ansible..."
                                
                                # Crear entorno virtual aislado para Ansible (evita PEP 668)
                                echo "Creando entorno virtual para Ansible..."
                                python3 -m venv /tmp/ansible-venv-${BUILD_NUMBER}
                                . /tmp/ansible-venv-${BUILD_NUMBER}/bin/activate
                                
                                # Instalar/actualizar pip y ansible en el venv
                                pip install --upgrade pip
                                pip install ansible==9.1.0
                                
                                # Verificar instalación
                                echo "✅ Ansible instalado en entorno virtual:" && ansible-playbook --version
                                
                                # Ejecutar playbook usando el ansible del venv
                                ANSIBLE_BIN=/tmp/ansible-venv-${BUILD_NUMBER}/bin/ansible-playbook
                                $ANSIBLE_BIN -i inventory/hosts playbooks/install-jenkins.yml -v
                            '''
                        }
                    } catch (Exception e) {
                        error("❌ Error instalando Jenkins: ${e.getMessage()}")
                    }
                }
            }
        }

        stage('Display Results') {
            steps {
                script {
                    try {
                        dir("${TF_DIR}") {
                            def jenkinsUrl = sh(
                                script: '''
                                    if [ -f "/tmp/terraform-${BUILD_NUMBER}/terraform" ]; then
                                        TERRAFORM_BIN="/tmp/terraform-${BUILD_NUMBER}/terraform"
                                    else
                                        TERRAFORM_BIN="terraform"
                                    fi
                                    $TERRAFORM_BIN output -raw jenkins_url
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            echo """
                            🎉 ¡Despliegue completado exitosamente!
                            
                            📊 Información de acceso:
                            - Jenkins URL: ${jenkinsUrl}
                            - Master IP: ${env.MASTER_IP}
                            - Slave IP: ${env.SLAVE_IP}
                            
                            🔐 Para acceder por SSH:
                            1. La clave SSH se generó automáticamente y está en: ${env.SSH_KEY_FILE}
                            2. SSH al Master: ssh -i ${env.SSH_KEY_FILE} azureuser@${env.MASTER_IP}
                            3. Obtener password inicial: sudo cat /var/lib/jenkins/secrets/initialAdminPassword
                            4. Acceder a Jenkins: ${jenkinsUrl}
                            
                            📝 Configurar Slave en Jenkins:
                            1. Ve a Manage Jenkins > Manage Nodes
                            2. Agrega nuevo nodo con IP: ${env.SLAVE_IP}
                            3. Usa SSH como método de conexión
                            4. La misma clave SSH funciona para ambas VMs
                            """
                        }
                    } catch (Exception e) {
                        echo "⚠️ Error mostrando resultados: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "🧹 Iniciando limpieza de archivos temporales..."
                
                // Limpiar archivos temporales sensibles SIEMPRE
                sh '''
                    echo "Limpiando inventario temporal de Ansible..."
                    cd ${WORKSPACE}/${ANSIBLE_DIR}
                    if [ -f inventory/hosts.tmp ]; then
                        rm -f inventory/hosts.tmp
                    fi
                    
                    # Restaurar inventario original si existe backup
                    if [ -f inventory/hosts.original ]; then
                        cp inventory/hosts.original inventory/hosts
                    fi
                '''
            }
            echo "✅ Pipeline completado - archivos temporales limpiados"
        }
        
        failure {
            script {
                echo "❌ Pipeline falló - Iniciando limpieza automática..."
                
                if (env.INFRASTRUCTURE_DEPLOYED == 'true' && params.AUTO_CLEANUP_ON_FAILURE) {
                    echo "🔥 Ejecutando terraform destroy automático..."
                    
                    try {
                        dir("${TF_DIR}") {
                            sh '''
                                # Usar Terraform desde la ubicación temporal o sistema
                                if [ -f "/tmp/terraform-${BUILD_NUMBER}/terraform" ]; then
                                    TERRAFORM_BIN="/tmp/terraform-${BUILD_NUMBER}/terraform"
                                else
                                    TERRAFORM_BIN="terraform"
                                fi
                                
                                echo "Destruyendo infraestructura debido a fallo..."
                                $TERRAFORM_BIN init
                                $TERRAFORM_BIN destroy -auto-approve
                                echo "✅ Infraestructura destruida automáticamente"
                            '''
                        }
                    } catch (Exception e) {
                        echo "⚠️ Error durante limpieza automática: ${e.getMessage()}"
                        echo "🚨 ACCIÓN REQUERIDA: Destruir infraestructura manualmente en Azure"
                    }
                } else if (env.INFRASTRUCTURE_DEPLOYED == 'true') {
                    echo "⚠️ AUTO_CLEANUP_ON_FAILURE está deshabilitado"
                    echo "🚨 ACCIÓN REQUERIDA: Ejecutar pipeline con DESTROY_INFRASTRUCTURE=true"
                }
                
                // Limpiar clave SSH en caso de fallo
                sh '''
                    if [ -f ${SSH_KEY_FILE} ]; then
                        echo "Limpiando clave SSH temporal..."
                        rm -f ${SSH_KEY_FILE}
                    fi
                '''
                
                echo """
                ❌ PIPELINE FALLÓ
                
                🔍 Pasos para debug:
                1. Revisar logs del stage que falló
                2. Verificar credenciales en Jenkins (solo Azure, no SSH)
                3. Verificar conectividad a Azure
                4. Si infraestructura quedó parcial, ejecutar con DESTROY_INFRASTRUCTURE=true
                
                📞 Soporte: Crear issue en GitHub con logs completos
                """
            }
        }
        
        success {
            echo """
            ✅ PIPELINE EXITOSO
            
            🎯 Próximos pasos:
            1. Acceder a Jenkins en la URL mostrada
            2. Configurar el slave desde la UI usando la misma clave SSH
            3. Crear jobs para tu proyecto AWS existente
            4. ¡Disfrutar tu Jenkins en la nube con claves automáticas!
            
            🔑 Ventajas de las claves automáticas:
            - Generadas automáticamente por Azure/Terraform
            - Únicas para cada despliegue
            - No necesitas manejar claves manualmente
            """
        }
    }
} 